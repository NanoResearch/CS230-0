1) Paul Gerlich 612500889

2) My simplehero is rather complicatedly simple. All I do is go through and check the map, see how many eatables/powerups there are on the map, and then find the x/y location and vertice location of each eatible. This is done with a BFS from my current position (as the hero.) After I execute this first BFS, I then go to each individual powerup and eatible on the map (still on the first turn) and assess whether or not you can reach all other powerups and eatables from that location. The number of powerups and eatables reachable are stored in a 7 row wide column. For specifics on where what is stored, you can see the comments in my simplehero.cpp file. Anyways, after I have assessed whether or not everything is reachable (I also mark a cell in that table to say that each powerup/eatable is still available --> yes I realize the implications with this and have fixed it) I then go ahead and choose the nearest item to me that can reach all other items. I have a 4 stage process (subject to change) for going about movements as well. I first will start with eatables that can reach everything. Once I run out of eatables, or run out of eatables that can reach everything, I then move on to powerups that can reach everything. Every time I make a move, I check to see if I am currently on an eatable or powerup based on the x/y coordinates of the items. If I am, I mark them down and update the maximum powerups/eatables reachable from each powerup/eatable still on the board. I essentially do this until I run out of powerups and eatables. I have a blank method programmed in for avoiding enemies but I haven't implemented it yet. From what I noticed, I'm normally okay with avoiding enemies unless they trap me (just because of the directness in which I move) but obviously that won't always be the case.


3) Honestly there wasn't much ambiguity to the project that I remember. It was pretty straightforward. With the comparison to see if something is a powerup/eatable/ect. I was originally using == but then implemented the bitwise & operation.

4) The only sourcecode files I use are simplehero.hpp and simplehero.cpp. The .hpp is a header file where the class is defined and the methods/attributes are added. The .cpp is the implementation of my simplehero actor.
